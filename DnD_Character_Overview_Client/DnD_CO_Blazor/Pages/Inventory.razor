@page "/inventory"
@inject Services.InventoryService InventoryService

<h3>Inventory Management</h3>

<div>
    <h4>Shared Inventory</h4>
    <ul>
        @if (sharedInventory != null && sharedInventory.Any())
        {
            @foreach (var item in sharedInventory)
            {
                <li>@item.ItemName - Quantity: @item.Quantity 
                    <button class="btn btn-sm btn-secondary" @onclick="() => EditItem(item)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item.Id)">Delete</button>
                    <br><br>
                </li>
            }
        }
        else
        {
            <li><em>No items in shared inventory.</em></li>
        }
    </ul>
    
    @* <div>
        <h4>Add New Item to Shared Inventory</h4>
        <input type="text" @bind="newItemName" placeholder="Item Name" />
        <input type="number" @bind="newItemQuantity" placeholder="Quantity" />
        <button class="btn btn-primary" @onclick="AddItem">Add Item</button>
    </div> *@
</div>

<div>
    <h4>Player Character Inventories</h4>
    @if (playerCharacters != null && playerCharacters.Any())
    {
        @foreach (var character in playerCharacters)
        {
            <h5>@character.Name's Inventory</h5>
            <ul>
                @if (character.InventoryItems != null && character.InventoryItems.Any())
                {
                    @foreach (var item in character.InventoryItems)
                    {
                        <li>@item.ItemName - Quantity: @item.Quantity</li>
                    }
                }
                else
                {
                    <li><em>No items.</em></li>
                }
            </ul>
        }
    }
    else
    {
        <p><em>No player characters available.</em></p>
    }
</div>

<div>
    <h4>DM Character Inventories</h4>
    @if (dmCharacters != null && dmCharacters.Any())
    {
        @foreach (var character in dmCharacters)
        {
            <h5>@character.Name's Inventory</h5>
            <ul>
                @if (character.InventoryItems != null && character.InventoryItems.Any())
                {
                    @foreach (var item in character.InventoryItems)
                    {
                        <li>@item.ItemName - Quantity: @item.Quantity</li>
                    }
                }
                else
                {
                    <li><em>No items.</em></li>
                }
            </ul>
        }
    }
    else
    {
        <p><em>No DM characters available.</em></p>
    }
</div>

@code {
    private List<InventoryItem> sharedInventory = new List<InventoryItem>();
    private List<PlayerCharacter> playerCharacters = new List<PlayerCharacter>();
    private List<DMCharacter> dmCharacters = new List<DMCharacter>();

    // Fields for new item input
    private string newItemName = string.Empty;
    private int newItemQuantity = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadInventories();
    }

    private async Task LoadInventories()
    {
        playerCharacters = await InventoryService.GetPlayerCharactersAsync() ?? new List<PlayerCharacter>();
        Console.WriteLine($"Loaded {playerCharacters.Count} player characters.");

        dmCharacters = await InventoryService.GetDMCharactersAsync() ?? new List<DMCharacter>();
        Console.WriteLine($"Loaded {dmCharacters.Count} DM characters.");

        await InventoryService.PopulateCharacterInventories(playerCharacters, dmCharacters);

        sharedInventory = await InventoryService.GetPartyInventoryAsync() ?? new List<InventoryItem>();
        Console.WriteLine($"Loaded {sharedInventory.Count} shared inventory items.");
    }

    private async Task AddItem()
    {
        var newItem = new InventoryItem { ItemName = "New Item", Quantity = 1, Weight = 0.5m }; // Example new item
        int characterId = 1; // Assign appropriate ID
        await InventoryService.AddInventoryItemAsync(characterId, newItem); // Replace 'characterId' with appropriate ID
        await LoadInventories();
    }

    private void EditItem(InventoryItem item)
    {
        // Logic for editing an item
    }

    private async Task DeleteItem(int itemId)
    {
        int characterId = 1; // Assign appropriate ID
        await InventoryService.DeleteInventoryItemAsync(characterId, itemId); // Replace 'characterId' with appropriate ID
        await LoadInventories();
    }
}
